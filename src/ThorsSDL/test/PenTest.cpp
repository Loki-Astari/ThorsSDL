#include "gtest/gtest.h"
#include "coverage/ThorMock.h"
#include "Pen.h"
#include "Application.h"
#include "Window.h"

TEST(PenTest, PenCreate)
{
    auto action = []()
    {
        ThorsAnvil::UI::Pen             pen;

        // DEFAULT Pen is black with transparent fill
        EXPECT_EQ(ThorsAnvil::UI::C::black, pen.ink);
        EXPECT_EQ(0, pen.fill.alpha);
    };

    EXPECT_NO_THROW(
        action();
    );
}

TEST(PenTest, PenCreateWithInk)
{
    auto action = []()
    {
        ThorsAnvil::UI::Pen             pen{ThorsAnvil::UI::C::red};

        // DEFAULT Pen is black with transparent fill
        EXPECT_EQ(ThorsAnvil::UI::C::red, pen.ink);
        EXPECT_EQ(0, pen.fill.alpha);
    };

    EXPECT_NO_THROW(
        action();
    );
}

TEST(PenTest, PenCreateWithInkAndFill)
{
    auto action = []()
    {
        ThorsAnvil::UI::Pen             pen{ThorsAnvil::UI::C::blue, ThorsAnvil::UI::C::yellow};

        // DEFAULT Pen is black with transparent fill
        EXPECT_EQ(ThorsAnvil::UI::C::blue, pen.ink);
        EXPECT_EQ(ThorsAnvil::UI::C::yellow, pen.fill);
    };

    EXPECT_NO_THROW(
        action();
    );
}

TEST(PenTest, CallDrawingFunctions)
{
    MOCK_SYS(SDL_Init,        [](Uint32){return 0;});
    MOCK_SYS(SDL_Quit,        [](){});
    MOCK_SYS(SDL_PollEvent,   [](SDL_Event*){return 0;});

    auto createWindowMock       = [](char const*, Uint32, Uint32, Uint32, Uint32, Uint32) -> SDL_Window* {return reinterpret_cast<SDL_Window*>(1);};
    auto createRendererMock     = [](SDL_Window*, Uint32, Uint32) -> SDL_Renderer* {return reinterpret_cast<SDL_Renderer*>(2);};
    auto setHintMock            = [](char const*, char const*) { return  SDL_TRUE;};
    auto setRenderDrawColorMock = [](SDL_Renderer*, Uint8, Uint8, Uint8, Uint8){ return 0;};

    MOCK_SYS(SDL_CreateWindow,      createWindowMock);
    MOCK_SYS(SDL_DestroyWindow,     [](SDL_Window*){});
    MOCK_SYS(SDL_CreateRenderer,    createRendererMock);
    MOCK_SYS(SDL_DestroyRenderer,   [](SDL_Renderer*){});
    MOCK_SYS(SDL_SetHint,           setHintMock);
    MOCK_SYS(SDL_SetRenderDrawColor,setRenderDrawColorMock);
    MOCK_SYS(SDL_RenderClear,       [](SDL_Renderer*){ return 0;});
    MOCK_SYS(SDL_RenderPresent,     [](SDL_Renderer*){});
    MOCK_SYS(SDL_GetWindowID,       [](SDL_Window* win) -> Uint32 {return 1;});

    auto drawPoint = [](SDL_Renderer*, int, int){return 0;};
    auto drawLine = [](SDL_Renderer*, int, int, int, int){return 0;};
    auto drawRect = [](SDL_Renderer*, SDL_Rect const*){return 0;};
    auto drawFromPoints = [](SDL_Renderer*, SDL_Point const*, int){return 0;};
    auto drawFromLRect = [](SDL_Renderer*, SDL_Rect const*, int){return 0;};
    MOCK_SYS(SDL_RenderDrawPoint,   drawPoint);
    MOCK_SYS(SDL_RenderDrawLine,    drawLine);
    MOCK_SYS(SDL_RenderFillRect,    drawRect);
    MOCK_SYS(SDL_RenderDrawRect,    drawRect);
    MOCK_SYS(SDL_RenderDrawPoints,  drawFromPoints);
    MOCK_SYS(SDL_RenderDrawLines,   drawFromPoints);
    MOCK_SYS(SDL_RenderFillRects,   drawFromLRect);
    MOCK_SYS(SDL_RenderDrawRects,   drawFromLRect);
    auto action = []()
    {
        ThorsAnvil::UI::Application     application;
        ThorsAnvil::UI::Window          window(application, "Title", {100, 100, 200, 200});

        ThorsAnvil::UI::Pen             pen{ThorsAnvil::UI::C::black, ThorsAnvil::UI::C::blue};
        pen.drawPoint(window, {10, 10});
        pen.drawLine(window, {10, 10}, {20, 20});
        pen.drawRect(window, {10, 10, 20, 20});


        pen.drawPoints(window, { {10, 10}, {20, 20}, {30, 30} });
        pen.drawLines(window, { {10, 10}, {20, 20}, {30, 30} });
        pen.drawRects(window, { {10, 10, 20 , 20}, {100, 100, 20, 20}, {200, 200, 20, 20} });
    };

    EXPECT_NO_THROW(
        action();
    );

}

