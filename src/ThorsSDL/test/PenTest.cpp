#include "gtest/gtest.h"
#include "test/MockSDL.h"
#include "Pen.h"
#include "Application.h"
#include "Window.h"

TEST(PenTest, PenCreate)
{
    auto action = []()
    {
        ThorsAnvil::UI::Pen             pen;

        // DEFAULT Pen is black with transparent fill
        EXPECT_EQ(ThorsAnvil::UI::C::black, pen.ink);
        EXPECT_EQ(0, pen.fill.alpha);
    };

    EXPECT_NO_THROW(
        action();
    );
}

TEST(PenTest, PenCreateWithInk)
{
    auto action = []()
    {
        ThorsAnvil::UI::Pen             pen{ThorsAnvil::UI::C::red};

        // DEFAULT Pen is black with transparent fill
        EXPECT_EQ(ThorsAnvil::UI::C::red, pen.ink);
        EXPECT_EQ(0, pen.fill.alpha);
    };

    EXPECT_NO_THROW(
        action();
    );
}

TEST(PenTest, PenCreateWithInkAndFill)
{
    auto action = []()
    {
        ThorsAnvil::UI::Pen             pen{ThorsAnvil::UI::C::blue, ThorsAnvil::UI::C::yellow};

        // DEFAULT Pen is black with transparent fill
        EXPECT_EQ(ThorsAnvil::UI::C::blue, pen.ink);
        EXPECT_EQ(ThorsAnvil::UI::C::yellow, pen.fill);
    };

    EXPECT_NO_THROW(
        action();
    );
}

TEST(PenTest, CallDrawingFunctions)
{
    MocksSDLActions     actions;
    MockSDL             mockActivate(actions);

    auto action = []()
    {
        ThorsAnvil::UI::Application     application;
        ThorsAnvil::UI::Window          window(application, "Title", {100, 100, 200, 200});

        ThorsAnvil::UI::Pen             pen{ThorsAnvil::UI::C::black, ThorsAnvil::UI::C::blue};
        pen.drawPoint(window, {10, 10});
        pen.drawLine(window, {10, 10}, {20, 20});
        pen.drawRect(window, {10, 10, 20, 20});


        pen.drawPoints(window, { {10, 10}, {20, 20}, {30, 30} });
        pen.drawLines(window, { {10, 10}, {20, 20}, {30, 30} });
        pen.drawRects(window, { {10, 10, 20 , 20}, {100, 100, 20, 20}, {200, 200, 20, 20} });
    };

    EXPECT_NO_THROW(
        action();
    );

}

TEST(PenTest, CreateTextPenWithInitializing)
{
    MocksSDLActions     actions;
    MockSDL             mockActivate(actions);

    auto action = []()
    {
        ThorsAnvil::UI::TextPen pen("arial.ttf");
    };

    EXPECT_NO_THROW(
        action();
    );

    EXPECT_EQ(1, actions.count[countTTF_OpenFont]);
    EXPECT_EQ(1, actions.count[countTTF_CloseFont]);
}

TEST(PenTest, CreateTextPenWithoutInitializing)
{
    MocksSDLActions     actions{.mockTTF_OpenFont = [](char const*, int){return nullptr;}};
    MockSDL             mockActivate(actions);

    auto action = []()
    {
        ThorsAnvil::UI::TextPen pen("arial.ttf");
    };

    EXPECT_THROW(
        action(),
        std::runtime_error
    );

    EXPECT_EQ(1, actions.count[countTTF_OpenFont]);
    EXPECT_EQ(0, actions.count[countTTF_CloseFont]);
}

